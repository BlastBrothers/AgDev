	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	__u_scan
__u_scan:
	ld	hl, -162
	call	__frameset
	ld	hl, (ix + 9)
	ld	bc, -136
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	xor	a, a
	ld	de, 0
	ld	bc, -133
	lea	iy, ix
	add	iy, bc
	ld	bc, -142
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	(ix - 3), de
	ld	de, -133
	lea	iy, ix
	add	iy, de
	lea	bc, iy
	push	ix
	ld	de, -139
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	ld	de, -133
	add	ix, de
	lea	bc, ix
	pop	ix
	ld	hl, (ix + 12)
	ld	(_argp), hl
	ld	(_fields), a
	ld	de, (ix - 3)
	ld	(_len), de
	ld	(_prev_ch), de
	ld	(_isunget), a
	ld	iy, (ix + 6)
	ld	(_bptr), iy
	ld	l, 1
BB0_1:
	ld	a, l
	or	a, a
	jp	z, BB0_140
	ld	(ix - 3), de
	ld	de, -145
	lea	iy, ix
	add	iy, de
	ld	(iy), l
	ld	de, -148
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	ld	de, (ix - 3)
	push	de
	pop	hl
	ld	bc, -1
	or	a, a
	sbc	hl, bc
	jp	z, BB0_140
	ld	bc, -136
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	a, (hl)
	or	a, a
	jp	z, BB0_140
	ex	de, hl
	ld	hl, _fmt_str
	push	hl
	push	de
	call	__u_sscan
	pop	de
	pop	de
	ld	a, (_fmt_str)
	cp	a, 1
	jp	z, BB0_142
	cp	a, 2
	ld	bc, -136
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), hl
	jr	nz, BB0_9
	ld	a, (_fmt_str+3)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	push	hl
	call	_isspace
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB0_32
	call	_get
	push	hl
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB0_81
	ld	a, (_fmt_str+3)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ex	de, hl
	or	a, a
	sbc	hl, bc
	jp	z, BB0_81
	jp	BB0_139
BB0_9:
	ld	a, (_fmt_str+1)
	ld	e, a
	bit	7, e
	jp	nz, BB0_34
	ld	a, (_fmt_str+4)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	iy
	ld	iyl, a
	lea	hl, iy
	ld	bc, 65
	or	a, a
	sbc	hl, bc
	jr	z, BB0_12
	lea	hl, iy
	ld	bc, -69
	add	hl, bc
	ld	bc, 3
	or	a, a
	sbc	hl, bc
	jp	nc, BB0_49
BB0_12:
	ld	a, (_fmt_str+5)
	add	a, -127
	cp	a, -126
	jr	nc, BB0_14
	ld	a, 126
	ld	(_fmt_str+5), a
BB0_14:
	call	_get
	push	hl
	pop	iy
	ld	c, 16
	call	__ishl
	ld	de, -65536
	or	a, a
	sbc	hl, de
	jp	z, BB0_79
	ld	de, -145
	lea	hl, ix
	add	hl, de
	ld	(hl), iy
	lea	hl, iy
	call	__ishl
	call	__ishrs
	push	hl
	call	_isspace
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB0_14
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	d, h
	ld	iyh, d
	ex	de, hl
	ld	d, iyh
	ex	de, hl
	ld	iyl, 1
	push	ix
	ld	de, -154
	add	ix, de
	push	af
	ld	a, iyl
	ld	(ix), a
	pop	af
	pop	ix
	push	ix
	ld	de, -157
	add	ix, de
	push	af
	ld	a, iyl
	ld	(ix), a
	pop	af
	pop	ix
BB0_17:
	ld	a, (_fmt_str+5)
	ld	l, a
	push	ix
	ld	de, -158
	add	ix, de
	ld	(ix), h
	pop	ix
	ld	a, h
	cp	a, l
	ld	(ix - 3), bc
	ld	bc, -139
	lea	hl, ix
	push	af
	add	hl, bc
	pop	af
	ld	de, (hl)
	ld	bc, (ix - 3)
	jp	nc, BB0_52
	ld	(ix - 3), de
	ld	de, -145
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	push	ix
	ld	de, -159
	add	ix, de
	ld	(ix), l
	pop	ix
	ld	de, -154
	lea	hl, ix
	add	hl, de
	ld	a, (hl)
	or	a, a
	push	ix
	ld	de, -151
	push	af
	add	ix, de
	pop	af
	ld	(ix), bc
	pop	ix
	ld	de, (ix - 3)
	jr	z, BB0_21
	ld	bc, -145
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	c, 16
	call	__ishl
	ld	(ix - 3), de
	push	ix
	ld	de, -162
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	bc, 4521984
	or	a, a
	sbc	hl, bc
	ld	de, -151
	lea	hl, ix
	push	af
	add	hl, de
	pop	af
	ld	bc, (hl)
	ex	de, hl
	ld	e, iyh
	ld	d, iyh
	ex	de, hl
	ld	a, 1
	ld	de, (ix - 3)
	jp	z, BB0_30
	ld	bc, -162
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 6619136
	or	a, a
	sbc	hl, bc
	ld	(ix - 3), de
	ld	de, -151
	lea	hl, ix
	push	af
	add	hl, de
	pop	af
	ld	bc, (hl)
	ex	de, hl
	ld	e, iyh
	ld	d, iyh
	ex	de, hl
	ld	a, 1
	ld	de, (ix - 3)
	jp	z, BB0_30
BB0_21:
	ld	bc, -145
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 255
	call	__iand
	ld	(ix - 3), bc
	push	ix
	ld	bc, -157
	add	ix, bc
	ld	a, (ix)
	pop	ix
	or	a, a
	ld	bc, (ix - 3)
	jr	z, BB0_24
	ld	a, l
	cp	a, 46
	jr	nz, BB0_24
	ld	bc, -154
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	ex	de, hl
	ld	d, iyh
	ex	de, hl
	ld	a, iyl
	ld	(ix - 3), de
	ld	de, -151
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	jp	BB0_29
BB0_24:
	ld	a, iyl
	or	a, a
	jr	nz, BB0_26
BB0_25:
	ld	de, -145
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	c, 16
	call	__ishl
	call	__ishrs
	push	hl
	call	_isdigit
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, -154
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	l, (iy)
	push	ix
	ld	bc, -157
	push	af
	add	ix, bc
	pop	af
	ld	h, (ix)
	pop	ix
	ld	a, 0
	push	ix
	ld	bc, -139
	push	af
	add	ix, bc
	pop	af
	ld	de, (ix)
	pop	ix
	ld	(ix - 3), de
	push	ix
	ld	de, -151
	push	af
	add	ix, de
	pop	af
	ld	bc, (ix)
	pop	ix
	ld	de, (ix - 3)
	jr	nz, BB0_30
	jp	BB0_52
BB0_26:
	push	ix
	ld	bc, -159
	add	ix, bc
	ld	a, (ix)
	pop	ix
	cp	a, 45
	jr	z, BB0_28
	ld	a, l
	cp	a, 43
	jr	nz, BB0_25
BB0_28:
	ld	bc, -154
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	push	ix
	ld	bc, -157
	add	ix, bc
	ld	h, (ix)
	pop	ix
	ld	a, iyh
	ld	bc, -139
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	ld	(ix - 3), de
	push	ix
	ld	de, -151
	add	ix, de
	ld	bc, (ix)
	pop	ix
BB0_29:
	ld	de, (ix - 3)
BB0_30:
	ld	(ix - 3), bc
	ld	bc, -162
	lea	iy, ix
	add	iy, bc
	ld	(iy), a
	push	ix
	ld	bc, -157
	add	ix, bc
	ld	(ix), h
	pop	ix
	push	ix
	ld	bc, -154
	add	ix, bc
	ld	(ix), l
	pop	ix
	ex	de, hl
	ld	bc, (ix - 3)
	add	hl, bc
	push	ix
	ld	bc, -159
	add	ix, bc
	ld	a, (ix)
	pop	ix
	ld	(hl), a
	call	_get
	ld	a, l
	cp	a, -1
	jp	z, BB0_79
	ld	de, -145
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, -158
	lea	hl, ix
	add	hl, de
	ld	h, (hl)
	inc	h
	push	ix
	ld	de, -151
	add	ix, de
	ld	bc, (ix)
	pop	ix
	inc	bc
	push	ix
	ld	de, -162
	add	ix, de
	push	af
	ld	a, (ix)
	ld	iyl, a
	pop	af
	pop	ix
	inc	d
	ld	iyh, d
	jp	BB0_17
BB0_32:
	call	_get
	push	hl
	call	_isspace
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB0_32
	call	_unget
	jp	BB0_81
BB0_34:
	bit	4, e
	ld	bc, 0
	jr	nz, BB0_36
	ld	iy, (_argp)
	lea	hl, iy + 3
	ld	(_argp), hl
	ld	bc, (iy)
BB0_36:
	ld	iy, (_fmt_str+7)
	ld	e, (iy)
	ld	a, e
	cp	a, 94
	jr	nz, BB0_38
	inc	iy
	ld	(_fmt_str+7), iy
BB0_38:
	ld	a, (_fmt_str+5)
	ld	l, a
	or	a, a
	ld	a, 127
	jr	z, BB0_40
	ld	a, l
BB0_40:
	push	bc
	pop	hl
	ld	c, a
	dec	c
	or	a, a
	jp	z, BB0_55
	ld	(ix - 3), de
	ld	de, -154
	lea	iy, ix
	add	iy, de
	ld	(iy), c
	push	ix
	ld	bc, -151
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	de, (ix - 3)
	ld	bc, -145
	lea	hl, ix
	add	hl, bc
	ld	(hl), e
	call	_get
	push	hl
	pop	de
	ld	c, 16
	call	__ishl
	push	hl
	pop	iy
	push	de
	pop	hl
	call	__ishl
	call	__ishrs
	ld	(ix - 3), de
	push	ix
	ld	de, -157
	add	ix, de
	ld	(ix), hl
	pop	ix
	lea	hl, iy
	ld	bc, -65536
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	jp	z, BB0_79
	ld	c, e
	ld	iy, (_fmt_str+7)
	ld	de, (_fmt_str+10)
BB0_43:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jr	nc, BB0_46
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	(ix - 3), de
	push	ix
	ld	de, -158
	add	ix, de
	ld	(ix), c
	pop	ix
	ld	de, (ix - 3)
	push	de
	pop	bc
	push	hl
	pop	de
	ld	e, a
	inc	iy
	ld	(ix - 3), bc
	push	ix
	ld	bc, -157
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	or	a, a
	sbc	hl, de
	ld	bc, (ix - 3)
	push	bc
	pop	de
	ld	(ix - 3), de
	ld	de, -158
	lea	hl, ix
	push	af
	add	hl, de
	pop	af
	ld	c, (hl)
	ld	de, (ix - 3)
	jr	nz, BB0_43
	ld	(ix - 3), bc
	ld	bc, -145
	lea	hl, ix
	add	hl, bc
	ld	e, (hl)
	ld	a, e
	cp	a, 94
	ld	bc, (ix - 3)
	jr	nz, BB0_47
	jp	BB0_54
BB0_46:
	ld	(ix - 3), bc
	ld	bc, -145
	lea	hl, ix
	add	hl, bc
	ld	e, (hl)
	ld	a, e
	cp	a, 94
	ld	bc, (ix - 3)
	jr	nz, BB0_54
BB0_47:
	ld	iyl, c
	ld	bc, -151
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, 0
	ld	(ix - 3), bc
	push	ix
	ld	bc, -154
	push	af
	add	ix, bc
	pop	af
	ld	d, (ix)
	pop	ix
	ld	a, d
	ld	bc, (ix - 3)
	jp	z, BB0_40
	ld	a, iyl
	ld	(hl), a
	inc	hl
	push	hl
	pop	bc
	ld	a, d
	jp	BB0_40
BB0_49:
	ld	bc, -88
	add	iy, bc
	lea	hl, iy
	ld	bc, 33
	or	a, a
	sbc	hl, bc
	jp	nc, BB0_81
	ld	hl, JTI0_0
	lea	bc, iy
	add	hl, bc
	add	hl, bc
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 10
	jp	(hl)
BB0_51:
	ld	hl, 16
	jp	BB0_83
BB0_52:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB0_58
BB0_53:
	ld	a, (_fields)
	jp	BB0_80
BB0_54:
	ld	bc, -154
	lea	hl, ix
	add	hl, bc
	ld	a, (hl)
	cp	a, 1
	call	pe, __setflag
	call	p, _unget
	ld	bc, -151
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB0_55:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	a, 1
	ld	bc, -145
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), a
	jp	z, BB0_81
	ld	(hl), 0
BB0_57:
	ld	a, 1
	jp	BB0_80
BB0_58:
	ld	de, -151
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	ld	a, (_fmt_str+5)
	ld	l, a
	ld	bc, -158
	lea	iy, ix
	add	iy, bc
	ld	a, (iy)
	cp	a, l
	call	c, _unget
	ld	bc, -139
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	push	de
	pop	hl
	ld	(ix - 3), de
	ld	de, -151
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	add	hl, bc
	ld	(hl), 0
	ld	hl, 0
	push	hl
	ld	de, (ix - 3)
	push	de
	call	_strtod
	pop	bc
	pop	bc
	ld	a, (_fmt_str+1)
	bit	4, a
	ld	a, 1
	ld	bc, -145
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), a
	jp	nz, BB0_81
BB0_59:
	ld	iy, (_argp)
	lea	bc, iy + 3
	ld	(_argp), bc
	ld	iy, (iy)
	ld	(iy), hl
	ld	(iy + 3), e
BB0_60:
	ld	hl, _fields
	inc	(hl)
	jp	BB0_57
BB0_61:
	bit	4, e
	ld	hl, 0
	push	hl
	pop	bc
	jr	nz, BB0_63
	ld	iy, (_argp)
	lea	hl, iy + 3
	ld	(_argp), hl
	ld	bc, (iy)
BB0_63:
	ld	a, (_fmt_str+5)
	ld	l, a
	or	a, a
	ld	e, 0
	jr	nz, BB0_65
	ld	a, 1
	ld	(_fmt_str+5), a
	ld	l, a
BB0_65:
	ld	a, e
	cp	a, l
	jp	nc, BB0_57
	ld	(ix - 3), bc
	ld	bc, -151
	lea	hl, ix
	add	hl, bc
	ld	(hl), e
	ld	bc, (ix - 3)
	ld	de, -145
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	call	_get
	push	hl
	pop	de
	ld	a, e
	cp	a, -1
	jp	z, BB0_79
	ld	bc, -145
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, 0
	jr	z, BB0_69
	ld	a, e
	ld	de, -145
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	(hl), a
	inc	hl
	push	hl
	pop	bc
BB0_69:
	ld	hl, _fields
	inc	(hl)
	ld	(ix - 3), bc
	ld	bc, -151
	lea	hl, ix
	add	hl, bc
	ld	e, (hl)
	inc	e
	ld	a, (_fmt_str+5)
	ld	l, a
	ld	bc, (ix - 3)
	jr	BB0_65
BB0_70:
	bit	4, e
	jp	nz, BB0_81
	ld	bc, (_len)
	ld	iy, (_argp)
	lea	de, iy + 3
	ld	(_argp), de
	ld	hl, (iy)
	ld	(hl), bc
	ld	hl, _fields
	inc	(hl)
	jp	BB0_81
BB0_72:
	ld	a, (_fmt_str+5)
	add	a, -127
	cp	a, -126
	jr	nc, BB0_74
	ld	a, 126
	ld	(_fmt_str+5), a
BB0_74:
	call	_get
	push	hl
	pop	de
	ld	a, e
	cp	a, -1
	ld	a, 0
	ld	bc, -145
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), a
	jp	z, BB0_81
	ld	bc, -154
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
	ld	bc, -142
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	push	ix
	ld	bc, -151
	add	ix, bc
	ld	(ix), hl
	pop	ix
BB0_76:
	ld	bc, -145
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ex	de, hl
	ld	c, 16
	call	__ishl
	call	__ishrs
	push	hl
	call	_isxdigit
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB0_116
	ld	de, -145
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	a, l
	ld	de, -151
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	(hl), a
	ld	de, -154
	lea	iy, ix
	add	iy, de
	ld	c, (iy)
	inc	c
	ld	a, (_fmt_str+5)
	ld	e, a
	ld	(ix - 3), de
	push	ix
	ld	de, -145
	add	ix, de
	ld	(ix), c
	pop	ix
	ld	a, c
	ld	de, (ix - 3)
	cp	a, e
	jp	nc, BB0_127
	inc	hl
	ld	bc, -151
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	call	_get
	push	hl
	pop	de
	ld	a, e
	cp	a, -1
	ld	bc, -145
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	a, (iy)
	push	ix
	ld	bc, -154
	push	af
	add	ix, bc
	pop	af
	ld	(ix), a
	pop	ix
	jp	nz, BB0_76
BB0_79:
	xor	a, a
BB0_80:
	ld	bc, -145
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
BB0_81:
	ld	de, (_prev_ch)
	ld	(ix - 3), de
	ld	de, -148
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	de, -145
	lea	iy, ix
	add	iy, de
	ld	l, (iy)
	ld	de, (ix - 3)
	jp	BB0_1
BB0_82:
	ld	hl, 8
BB0_83:
	push	hl
	pop	bc
BB0_84:
	ld	de, -151
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	ld	a, (_fmt_str+5)
	add	a, -127
	cp	a, -126
	jr	nc, BB0_86
	ld	a, 126
	ld	(_fmt_str+5), a
BB0_86:
	call	_get
	push	hl
	pop	iy
	ld	c, 16
	call	__ishl
	ld	de, -65536
	or	a, a
	sbc	hl, de
	jr	z, BB0_79
	lea	hl, iy
	call	__ishl
	call	__ishrs
	push	hl
	call	_isspace
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB0_86
	call	_unget
	call	_get
	ld	a, l
	cp	a, -1
	ld	a, 0
	ld	bc, -145
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), a
	jp	z, BB0_81
	ld	c, a
	ld	(ix - 3), bc
	ld	bc, -148
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	push	ix
	ld	bc, -145
	add	ix, bc
	ld	(ix), de
	pop	ix
	ld	bc, (ix - 3)
BB0_90:
	ld	b, l
	ld	(ix - 3), bc
	ld	bc, -151
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	ld	a, e
	cp	a, 8
	ld	bc, (ix - 3)
	jr	nz, BB0_94
	ld	a, b
	and	a, -8
	cp	a, 48
	jp	z, BB0_100
	ld	a, b
	cp	a, 43
	jp	z, BB0_100
	ld	a, b
	cp	a, 45
	jp	z, BB0_100
	jp	BB0_135
BB0_94:
	ld	(ix - 3), de
	ld	de, -157
	lea	iy, ix
	add	iy, de
	ld	(iy), b
	push	ix
	ld	de, -154
	add	ix, de
	ld	(ix), c
	pop	ix
	ld	de, (ix - 3)
	ld	a, e
	cp	a, 10
	jr	nz, BB0_96
	ld	c, 16
	call	__ishl
	call	__ishrs
	push	hl
	call	_isdigit
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, -154
	lea	iy, ix
	push	af
	add	iy, de
	pop	af
	ld	c, (iy)
	push	ix
	ld	de, -157
	push	af
	add	ix, de
	pop	af
	ld	b, (ix)
	pop	ix
	jr	z, BB0_98
	jr	BB0_100
BB0_96:
	ld	bc, -151
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	ld	a, e
	cp	a, 16
	push	ix
	ld	de, -154
	push	af
	add	ix, de
	pop	af
	ld	c, (ix)
	pop	ix
	push	ix
	ld	de, -157
	push	af
	add	ix, de
	pop	af
	ld	b, (ix)
	pop	ix
	jr	nz, BB0_98
	ld	c, 16
	call	__ishl
	call	__ishrs
	push	hl
	call	_isxdigit
	ld	de, -157
	lea	iy, ix
	add	iy, de
	ld	b, (iy)
	push	ix
	ld	de, -154
	add	ix, de
	ld	c, (ix)
	pop	ix
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB0_100
BB0_98:
	ld	a, b
	cp	a, 43
	jr	z, BB0_100
	ld	a, b
	cp	a, 45
	jp	nz, BB0_134
BB0_100:
	ld	de, -145
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	(hl), b
	inc	hl
	ld	d, c
	inc	d
	ld	a, (_fmt_str+5)
	ld	e, a
	ld	(ix - 3), bc
	ld	bc, -154
	lea	iy, ix
	add	iy, bc
	ld	(iy), d
	ld	a, d
	cp	a, e
	ld	bc, (ix - 3)
	jp	nc, BB0_117
	ld	bc, -145
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	call	_get
	ld	a, l
	cp	a, -1
	ld	de, -154
	lea	iy, ix
	push	af
	add	iy, de
	pop	af
	ld	c, (iy)
	ld	a, 0
	jp	nz, BB0_90
	jp	BB0_80
BB0_102:
	bit	4, e
	ld	hl, 0
	jr	nz, BB0_104
	ld	iy, (_argp)
	lea	hl, iy + 3
	ld	(_argp), hl
	ld	hl, (iy)
BB0_104:
	ld	bc, -151
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	a, (_fmt_str+5)
	or	a, a
	jr	nz, BB0_106
	ld	a, 127
	ld	(_fmt_str+5), a
BB0_106:
	call	_get
	push	hl
	pop	iy
	ld	c, 16
	call	__ishl
	ld	de, -65536
	or	a, a
	sbc	hl, de
	jp	z, BB0_79
	lea	hl, iy
	call	__ishl
	call	__ishrs
	push	hl
	call	_isspace
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB0_106
	call	_unget
	call	_get
	ld	bc, -154
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	a, l
	cp	a, b
	ld	a, 0
	ld	bc, -145
	lea	hl, ix
	push	af
	add	hl, bc
	pop	af
	ld	(hl), a
	jp	z, BB0_81
	xor	a, a
	ld	bc, -145
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
BB0_110:
	ld	de, -154
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	c, 16
	call	__ishl
	call	__ishrs
	push	hl
	call	_isspace
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB0_131
	ld	bc, -154
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	e, l
	ld	a, e
	or	a, a
	jp	z, BB0_131
	ld	bc, -151
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	ld	bc, -157
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), hl
	jr	z, BB0_114
	ld	bc, -151
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(hl), e
	inc	hl
	ld	bc, -157
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
BB0_114:
	ld	bc, -145
	lea	hl, ix
	add	hl, bc
	ld	e, (hl)
	inc	e
	ld	a, (_fmt_str+5)
	ld	l, a
	ld	bc, -151
	lea	iy, ix
	add	iy, bc
	ld	(iy), e
	ld	a, e
	cp	a, l
	jp	nc, BB0_136
	call	_get
	ld	bc, -154
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	a, l
	cp	a, b
	ld	bc, -151
	lea	hl, ix
	push	af
	add	hl, bc
	pop	af
	ld	a, (hl)
	push	ix
	ld	bc, -145
	push	af
	add	ix, bc
	pop	af
	ld	(ix), a
	pop	ix
	push	ix
	ld	bc, -157
	push	af
	add	ix, bc
	pop	af
	ld	hl, (ix)
	pop	ix
	push	ix
	ld	bc, -151
	push	af
	add	ix, bc
	pop	af
	ld	(ix), hl
	pop	ix
	jp	z, BB0_79
	jp	BB0_110
BB0_116:
	ld	bc, -151
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	jp	BB0_128
BB0_117:
	inc	c
	ld	de, -154
	lea	iy, ix
	add	iy, de
	ld	(iy), c
BB0_118:
	ld	bc, -145
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	ix
	ld	bc, -148
	add	ix, bc
	ld	de, (ix)
	pop	ix
	or	a, a
	sbc	hl, de
	jp	z, BB0_53
	ld	a, (_fmt_str+5)
	ld	l, a
	ld	bc, -154
	lea	iy, ix
	add	iy, bc
	ld	a, (iy)
	cp	a, l
	call	c, _unget
	ld	bc, -145
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(hl), 0
	ld	a, (_fmt_str+4)
	cp	a, 117
	jr	z, BB0_122
	ld	bc, -151
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	a, l
	cp	a, 8
	jr	z, BB0_122
	ld	bc, -151
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	a, l
	cp	a, 16
	jp	nz, BB0_137
BB0_122:
	ld	bc, -151
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, 0
	push	hl
	ld	bc, -148
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strtoul
BB0_123:
	pop	bc
	pop	bc
	pop	bc
	ld	a, (_fmt_str+1)
	bit	4, a
	ld	a, 1
	ld	bc, -145
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), a
	jp	nz, BB0_81
	ld	a, (_fmt_str+2)
	cp	a, 76
	jp	z, BB0_59
	cp	a, 104
	jp	nz, BB0_138
	ld	iy, (_argp)
	lea	de, iy + 3
	ld	(_argp), de
	ld	iy, (iy)
	ld	(iy), l
	ld	(iy + 1), h
	jp	BB0_60
BB0_127:
	ld	bc, -154
	lea	iy, ix
	add	iy, bc
	ld	a, (iy)
	inc	a
	push	ix
	add	ix, bc
	ld	(ix), a
	pop	ix
	inc	hl
BB0_128:
	ld	bc, -151
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	ix
	ld	bc, -142
	add	ix, bc
	ld	de, (ix)
	pop	ix
	or	a, a
	sbc	hl, de
	ld	a, 0
	ld	bc, -145
	lea	hl, ix
	push	af
	add	hl, bc
	pop	af
	ld	(hl), a
	jp	z, BB0_81
	ld	a, (_fmt_str+5)
	ld	l, a
	ld	bc, -154
	lea	iy, ix
	add	iy, bc
	ld	a, (iy)
	cp	a, l
	call	c, _unget
	ld	bc, -151
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(hl), 0
	ld	hl, 16
	push	hl
	ld	hl, 0
	push	hl
	ld	bc, -142
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strtoul
	pop	de
	pop	de
	pop	de
	ld	a, (_fmt_str+1)
	bit	4, a
	ld	a, 1
	ld	bc, -145
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), a
	jp	nz, BB0_81
BB0_130:
	ld	iy, (_argp)
	lea	de, iy + 3
	ld	(_argp), de
	ld	iy, (iy)
	ld	(iy), hl
	jp	BB0_60
BB0_131:
	ld	a, (_fmt_str+5)
	ld	l, a
BB0_132:
	ld	bc, -145
	lea	iy, ix
	add	iy, bc
	ld	a, (iy)
	cp	a, l
	call	c, _unget
	ld	bc, -151
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	a, 1
	ld	bc, -145
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), a
	jp	z, BB0_81
	ld	bc, -151
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(hl), 0
	jp	BB0_60
BB0_134:
	ld	bc, -145
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	jp	BB0_118
BB0_135:
	ld	de, -154
	lea	hl, ix
	add	hl, de
	ld	(hl), c
	ld	bc, -145
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	jp	BB0_118
BB0_136:
	ld	bc, -145
	lea	iy, ix
	add	iy, bc
	ld	a, (iy)
	inc	a
	push	ix
	add	ix, bc
	ld	(ix), a
	pop	ix
	push	ix
	ld	bc, -157
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	ix
	ld	bc, -151
	add	ix, bc
	ld	(ix), de
	pop	ix
	jp	BB0_132
BB0_137:
	ld	bc, -151
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, 0
	push	hl
	ld	bc, -148
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strtol
	jp	BB0_123
BB0_138:
	cp	a, 108
	jp	z, BB0_59
	jp	BB0_130
BB0_139:
	ld	de, (_prev_ch)
BB0_140:
	ex	de, hl
	ld	de, -1
	or	a, a
	sbc	hl, de
	ld	bc, -1
	jr	nz, BB0_142
	ld	hl, (_len)
	ld	de, 2
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB0_143
BB0_142:
	ld	a, (_fields)
	ld	bc, 0
	ld	c, a
BB0_143:
	push	bc
	pop	hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
	private	JTI0_0
JTI0_0:
	dl	BB0_51
	dl	BB0_81
	dl	BB0_81
	dl	BB0_81
	dl	BB0_81
	dl	BB0_81
	dl	BB0_81
	dl	BB0_81
	dl	BB0_81
	dl	BB0_12
	dl	BB0_81
	dl	BB0_61
	dl	BB0_84
	dl	BB0_12
	dl	BB0_12
	dl	BB0_12
	dl	BB0_81
	dl	BB0_84
	dl	BB0_81
	dl	BB0_81
	dl	BB0_81
	dl	BB0_81
	dl	BB0_70
	dl	BB0_82
	dl	BB0_72
	dl	BB0_81
	dl	BB0_81
	dl	BB0_102
	dl	BB0_81
	dl	BB0_84
	dl	BB0_81
	dl	BB0_81
	dl	BB0_51

	section	.text,"ax",@progbits
	private	_get
_get:
	ld	hl, (_len)
	inc	hl
	ld	(_len), hl
	ld	hl, (_bptr)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB1_3
	ld	a, (_isunget)
	bit	0, a
	jr	z, BB1_4
	xor	a, a
	ld	(_isunget), a
	ld	hl, (_prev_ch)
	ret
BB1_3:
	push	hl
	pop	iy
	inc	iy
	ld	(_bptr), iy
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ret
BB1_4:
	call	_getchar
	ld	(_prev_ch), hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_unget
_unget:
	ld	a, 1
	ld	hl, (_len)
	dec	hl
	ld	(_len), hl
	ld	(_isunget), a
	ld	hl, (_bptr)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB2_2
	dec	hl
	ld	(_bptr), hl
BB2_2:
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	private	_argp
_argp:
	rb	3

	section	.bss,"aw",@nobits
	private	_fields
_fields:
	rb	1

	section	.bss,"aw",@nobits
	private	_len
_len:
	rb	3

	section	.bss,"aw",@nobits
	private	_prev_ch
_prev_ch:
	rb	3

	section	.bss,"aw",@nobits
	private	_isunget
_isunget:
	rb	1

	section	.bss,"aw",@nobits
	private	_bptr
_bptr:
	rb	3

	section	.bss,"aw",@nobits
	private	_fmt_str
_fmt_str:
	rb	19

	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 6c61664110f888c0285ae4c48b150c9a7a4361bb)"
	extern	_getchar
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	_isspace
	extern	_isdigit
	extern	_isxdigit
	extern	_strtoul
	extern	__ishrs
	extern	__u_sscan
	extern	__ishl
	extern	__setflag
	extern	__Unwind_SjLj_Unregister
	extern	__iand
	extern	_strtod
	extern	_strtol
