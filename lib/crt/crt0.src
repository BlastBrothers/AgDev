;
; Title:	C Runtime Initialisation Code
; Author:	Paul Cawte
; Created:	04/06/2023
; 
; Modinfo:
; Created from init.asm by Dean Belfield - which is part of the Zilog toolchain for Agon

	assume	adl = 1	


argv_ptrs_max := 16				; Maximum number of arguments allowed in argv

section .header

	jp	__start				; Jump to start

;
; The header stuff
;
_exec_name:
	db	PROG_NAME, ".bin", 0		; The executable name, only used in argv
	

	align	64				; The executable header is from byte 64 onwards
	weak	__mos_header
__mos_header:
	db	"MOS"				; Flag for MOS - to confirm this is a valid MOS command
	db	00h				; MOS header version 0
	db	01h				; Flag for run mode (0: Z80, 1: ADL)

;
; Initialisation code and C-runtime start
;
	section .init
	weak 	__start
__start:	
	PUSH	AF				; Preserve registers
	PUSH	BC
	PUSH	DE
	PUSH	IX
	PUSH	IY				; Need to preserve IY for MOS

	ld 	(_exit.sp), sp 			; save SP for exiting
	ld	sp, __stack		
			
	PUSH	HL				;  HL is the address of the cmd line param string
						;   set by MOS - I haven't seen this confirmed anywhere
						;   but implied by the _clear_bss code
	CALL	_clear_bss 			; Clear the RAM in the BSS segment
	POP	HL

ifextern ___main_argc_argv			; if int main(argc, *argv[]) get the parameters from command line
	LD 	IX, argv_ptrs			; The argv array pointer address
	PUSH	IX				; Parameter 2: *argv[0] = IX
	CALL	_parse_params			; Parse the parameters
	LD	B, 0				; Clear B from UBC as we just want ARGC
	PUSH	BC				; Parameter 1: argc
end if

ifextern ___main_argc_argv
	call	___main_argc_argv		; int main(int argc, char *argv[])
else
	call	_main 				; int main(void)
end if
	public	__start._main
__start._main := $ - 3

ifextern ___main_argc_argv
	POP	DE				; if int main(argc, *argv[]) clear up the stack
	POP	DE
end if

	private	skip._abort
skip._abort:
	ld 	sp,0 				; stack pointer is stored on entry, overwriting this address
	public	_exit.sp 
_exit.sp := $-3

	POP	IY				; Restore registers before exiting the program
	POP	IX
	POP	DE
	POP 	BC
	POP	AF
	LD 	HL, 0
	RET					; exit the program 
			
; Clear the memory (the heap used for dynamic variables)
;
; Location of BSS is defined by the labels (coming from linker_script)
;   ___low_bss
;   ___len_bss


_clear_bss:
	LD	BC, ___len_bss			; Check for non-zero length
	LD	A, ___len_bss shr 16 		; Check for non-zero length - A = high byte  
	OR	A, C				;   ored with with other two bytes
	OR	A, B
	RET	Z				; BSS is zero-length ...

	XOR	A, A
	LD 	(___low_bss), A   		; zero first byte of BSS
	SBC	HL, HL				; HL = 0
	DEC	BC				; 1st byte's taken care of
	SBC	HL, BC 				; DEC BC does not set condition codes, hence use of SBC HL
	RET	Z		  		; Just 1 byte ...

	LD	HL, ___low_bss			; Reset HL
	LD	DE, ___low_bss + 1		; [DE] = bss + 1
	LDIR					; Clear this section by copying 0 from the previous location
	RET
			
; Parse the parameter string into a C array
; Parameters
; - HL: Address of parameter string (seems to be set by MOS at start of programme)
; - IX: Address for array pointer storage
; Returns:
; -  C: Number of parameters parsed
;
_parse_params:
	LD	BC, _exec_name			; start of the program image 
	LD	(IX+0), BC			; store *ARGV[0] = the executable name
	INC	IX
	INC	IX
	INC	IX
	CALL	_skip_spaces			; Skip HL past any leading spaces
;
	LD	BC, 1				; C: ARGC = 1 - also clears out top 16 bits of BCU
	LD	B, argv_ptrs_max - 1		; B: Maximum number of argv_ptrs
;
_parse_params_1:	
	PUSH	BC				; Stack ARGC	
	PUSH	HL				; Stack start address of token
	CALL	_get_token			; Get the next token
	LD	A, C				; A: Length of the token in characters
	POP	DE				; Start address of token (was in HL)
	POP	BC				; ARGC
	OR	A				; Check for A=0 (no token found) OR at end of string
	RET	Z
;
	LD	(IX+0), DE			; Store the pointer to the token
	PUSH	HL				; DE=HL
	POP	DE
	CALL	_skip_spaces			; And skip HL past any spaces onto the next character
	XOR	A
	LD	(DE), A				; Zero-terminate the token
	INC	IX
	INC	IX
	INC	IX				; Advance to next pointer position
	INC	C				; Increment ARGC
	LD	A, C				; Check for C >= A
	CP	B
	JR C, 	_parse_params_1			; And loop
	RET

; Get the next token
; Parameters:
; - HL: Address of parameter string
; Returns:
; - HL: Address of first character after token
; -  C: Length of token (in characters)
;
_get_token:
	LD	C, 0				; Initialise length
get_token_loop:
	LD	A, (HL)				; Get the character from the parameter string
	OR	A				; Exit if 0 (end of parameter string in MOS)
	RET Z
	CP	13				; Exit if CR (end of parameter string in BBC BASIC)
	RET	Z
	CP	' '				; Exit if space (end of token)
	RET	Z
	INC	HL				; Advance to next character
	INC 	C				; Increment length
	JR	get_token_loop
	
; Skip spaces in the parameter string
; Parameters:
; - HL: Address of parameter string
; Returns:
; - HL: Address of next none-space character
;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
;
_skip_spaces:
	LD	A, (HL)				; Get the character from the parameter string	
	CP	' '				; Exit if not space
	RET	NZ
	INC	HL				; Advance to next character
	JR	_skip_spaces			; Increment length

; Write a character out to the ESP32
; int putch(int ch)
;
;__putch:
;_putch:
;	PUSH	IY
;	LD	IY, 0
;	ADD	IY, SP
;	LD	A, (IY+6)
;	RST.LIL	10h	
;	LD	HL, 0
;	LD	L, A
;	LD	SP, IY
;	POP	IY				
;	RET

; Read a character in from the ESP32
; int getch(void)
;
;__getch:
;_getch:
;	LD	HL, 0
;	RET

; Storage for the argv array pointers
;
section .data					; need private directive to make visible in .init section
private argv_ptrs
argv_ptrs:
repeat argv_ptrs_max
	dl	0			
end repeat

extern _main
extern ___main_argc_argv				
extern ___len_bss				; coming from linker_script, defined in makefile.mk
extern ___low_bss				; coming from linker_script, defined in makefile.mk
extern __stack					; defined in makefile.mk
