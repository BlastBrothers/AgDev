	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_vdp_vdu_init
_vdp_vdu_init:
	call	_mos_sysvars
	ld	(_sys_vars), hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_bell
_vdp_bell:
	ld	hl, _vdu_bell
	ld	de, 1
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_cursor_left
_vdp_cursor_left:
	ld	hl, _vdu_cursor_left
	ld	de, 1
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_cursor_right
_vdp_cursor_right:
	ld	hl, _vdu_cursor_right
	ld	de, 1
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_cursor_down
_vdp_cursor_down:
	ld	hl, _vdu_cursor_down
	ld	de, 1
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_cursor_up
_vdp_cursor_up:
	ld	hl, _vdu_cursor_up
	ld	de, 1
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_clear_screen
_vdp_clear_screen:
	ld	hl, _vdu_clear_screen
	ld	de, 1
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_clear_graphics
_vdp_clear_graphics:
	ld	hl, _vdu_clear_graphics
	ld	de, 1
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_cursor_home
_vdp_cursor_home:
	ld	hl, _vdu_cursor_home
	ld	de, 1
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_cursor_tab
_vdp_cursor_tab:
	call	__frameset0
	ld	a, (ix + 6)
	ld	l, (ix + 9)
	ld	de, _vdu_cursor_tab
	ld	bc, 3
	ld	(_vdu_cursor_tab+2), a
	ld	a, l
	ld	(_vdu_cursor_tab+1), a
	or	a, a
	sbc	hl, hl
	push	hl
	push	bc
	push	de
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_set_text_colour
_vdp_set_text_colour:
	call	__frameset0
	ld	a, (ix + 6)
	ld	hl, _vdu_set_text_colour
	ld	de, 2
	ld	(_vdu_set_text_colour+1), a
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_mode
_vdp_mode:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	de, -1
	ld	bc, 4
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB11_2
	ld	hl, _vdu_mode
	ld	de, 2
	ld	a, iyl
	ld	(_vdu_mode+1), a
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ld	de, (ix + 6)
BB11_2:
	ex	de, hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_graphics_origin
_vdp_graphics_origin:
	call	__frameset0
	ld	de, (ix + 6)
	ld	bc, (ix + 9)
	ld	hl, _vdu_graphics_origin+1
	ld	iy, _vdu_graphics_origin+3
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	(iy), c
	ld	(iy + 1), b
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 5
	push	hl
	ld	hl, _vdu_graphics_origin
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_get_scr_dims
_vdp_get_scr_dims:
	call	__frameset0
	ld	hl, (_sys_vars)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	call	z, _vdp_vdu_init
	ld	hl, _vdu_get_scr_dims
	ld	de, 3
	bit	0, (ix + 6)
	jr	z, BB13_3
	ld	iy, (_sys_vars)
	ld	(iy + 4), 0
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (_sys_vars)
BB13_2:
	ld	a, (iy + 4)
	bit	4, a
	jr	z, BB13_2
	jr	BB13_4
BB13_3:
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
BB13_4:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_logical_scr_dims
_vdp_logical_scr_dims:
	call	__frameset0
	ld	hl, _vdu_set_logical_scr_dims
	ld	de, 4
	ld	a, (ix + 6)
	and	a, 1
	ld	(_vdu_set_logical_scr_dims+3), a
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_cursor_enable
_vdp_cursor_enable:
	call	__frameset0
	ld	hl, _vdu_cursor_enable
	ld	de, 3
	ld	a, (ix + 6)
	and	a, 1
	ld	(_vdu_cursor_enable+2), a
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_move_to
_vdp_move_to:
	call	__frameset0
	ld	de, (ix + 6)
	ld	bc, (ix + 9)
	ld	hl, _vdu_move_to+2
	ld	iy, _vdu_move_to+4
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	(iy), c
	ld	(iy + 1), b
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 6
	push	hl
	ld	hl, _vdu_move_to
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_line_to
_vdp_line_to:
	call	__frameset0
	ld	de, (ix + 6)
	ld	bc, (ix + 9)
	ld	hl, _vdu_line_to+2
	ld	iy, _vdu_line_to+4
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	(iy), c
	ld	(iy + 1), b
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 6
	push	hl
	ld	hl, _vdu_line_to
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_point
_vdp_point:
	call	__frameset0
	ld	de, (ix + 6)
	ld	bc, (ix + 9)
	ld	hl, _vdu_point+2
	ld	iy, _vdu_point+4
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	(iy), c
	ld	(iy + 1), b
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 6
	push	hl
	ld	hl, _vdu_point
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_triangle
_vdp_triangle:
	call	__frameset0
	ld	de, (ix + 6)
	ld	bc, (ix + 9)
	ld	hl, _vdu_triangle+2
	ld	iy, _vdu_triangle+4
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	(iy), c
	ld	(iy + 1), b
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 6
	push	hl
	ld	hl, _vdu_triangle
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_circle_radius
_vdp_circle_radius:
	call	__frameset0
	ld	de, (ix + 6)
	ld	bc, (ix + 9)
	ld	hl, _vdu_circle_radius+2
	ld	iy, _vdu_circle_radius+4
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	(iy), c
	ld	(iy + 1), b
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 6
	push	hl
	ld	hl, _vdu_circle_radius
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_circle
_vdp_circle:
	call	__frameset0
	ld	de, (ix + 6)
	ld	bc, (ix + 9)
	ld	hl, _vdu_circle+2
	ld	iy, _vdu_circle+4
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	(iy), c
	ld	(iy + 1), b
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 6
	push	hl
	ld	hl, _vdu_circle
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_select_bitmap
_vdp_select_bitmap:
	call	__frameset0
	ld	a, (ix + 6)
	ld	hl, _vdu_select_bitmap
	ld	de, 4
	ld	(_vdu_select_bitmap+3), a
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_draw_bitmap
_vdp_draw_bitmap:
	call	__frameset0
	ld	de, (ix + 6)
	ld	bc, (ix + 9)
	ld	hl, _vdu_draw_bitmap+3
	ld	iy, _vdu_draw_bitmap+5
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	(iy), c
	ld	(iy + 1), b
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _vdu_draw_bitmap
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_load_bitmap
_vdp_load_bitmap:
	ld	hl, -9
	call	__frameset
	ld	bc, (ix + 6)
	ld	(ix - 9), bc
	ld	de, (ix + 9)
	ld	(ix - 6), de
	ld	hl, (ix + 12)
	ld	(ix - 3), hl
	ld	hl, _vdu_load_bitmap+3
	ld	iy, _vdu_load_bitmap+5
	ld	(hl), c
	inc	hl
	ld	(hl), b
	ld	(iy), e
	ld	(iy + 1), d
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _vdu_load_bitmap
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ld	c, 2
	ld	hl, (ix - 9)
	call	__ishl
	ld	bc, (ix - 6)
	call	__imulu
	push	hl
	pop	iy
BB24_1:
	ld	de, 65536
	lea	hl, iy
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB24_3
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 65535
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	(ix - 6), iy
	call	_mos_puts
	ld	iy, (ix - 6)
	pop	hl
	pop	hl
	pop	hl
	ld	de, 65535
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	ld	de, -65535
	add	iy, de
	jr	BB24_1
BB24_3:
	ld	hl, (ix - 3)
	ld	(ix + 6), hl
	ld	(ix + 9), iy
	ld	(ix + 12), 0
	ld	sp, ix
	pop	ix
	jp	_mos_puts
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_load_bitmap_file
_vdp_load_bitmap_file:
	ld	hl, -15
	call	__frameset
	ld	hl, 65535
	push	hl
	call	_malloc
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB25_2
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	ld	(ix - 6), hl
	ld	hl, (ix + 6)
	ld	de, _.str
	push	de
	push	hl
	call	_fopen
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB25_3
BB25_2:
	scf
	sbc	hl, hl
	jp	BB25_14
BB25_3:
	ld	(ix - 9), hl
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	ld	iy, _vdu_load_bitmap+3
	ld	(iy), e
	ld	(iy + 1), d
	ld	hl, _vdu_load_bitmap+5
	ld	(hl), c
	inc	hl
	ld	(hl), b
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _vdu_load_bitmap
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ld	c, 2
	ld	hl, (ix + 9)
	call	__ishl
	ld	bc, (ix + 12)
	call	__imulu
	push	hl
	pop	bc
	ld	de, 65535
	or	a, a
	sbc	hl, de
	push	bc
	pop	de
	call	pe, __setflag
	jp	m, BB25_8
	ld	bc, 65535
	jr	BB25_8
BB25_5:
	ld	(ix - 15), de
	ld	hl, (ix - 9)
	push	hl
	ld	(ix - 12), bc
	push	bc
	push	iy
	ld	hl, (ix - 3)
	push	hl
	call	_fread
	pop	de
	pop	de
	pop	de
	pop	de
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	jr	z, BB25_7
	scf
	sbc	hl, hl
	ld	(ix - 6), hl
BB25_7:
	or	a, a
	sbc	hl, hl
	push	hl
	push	de
	ld	hl, (ix - 3)
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 15)
	ld	de, (ix - 12)
	push	de
	pop	bc
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
BB25_8:
	ld	iy, 1
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB25_5
	push	de
	pop	bc
	ld	de, 1
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB25_13
	ld	hl, (ix - 9)
	push	hl
	push	bc
	push	iy
	ld	hl, (ix - 3)
	push	hl
	ld	(ix - 15), bc
	call	_fread
	pop	de
	pop	de
	pop	de
	pop	de
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	jr	z, BB25_12
	scf
	sbc	hl, hl
	ld	(ix - 6), hl
BB25_12:
	or	a, a
	sbc	hl, hl
	push	hl
	push	de
	ld	hl, (ix - 3)
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
BB25_13:
	ld	hl, (ix - 9)
	push	hl
	call	_fclose
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	call	_free
	pop	hl
	ld	hl, (ix - 6)
BB25_14:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_load_sprite_bitmaps
_vdp_load_sprite_bitmaps:
	ld	hl, -21
	call	__frameset
	ld	bc, (ix + 12)
	ld	hl, (ix + 15)
	call	__imulu
	ld	c, 2
	ld	(ix - 3), hl
	call	__ishl
	push	hl
	call	_malloc
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB26_2
	or	a, a
	sbc	hl, hl
	jp	BB26_11
BB26_2:
	ld	(ix - 6), hl
	ld	bc, (ix + 18)
	ld	de, 1
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	dec	de
	jp	p, BB26_4
	push	de
	pop	bc
BB26_4:
	ld	iy, (ix + 6)
	ld	hl, (ix + 21)
	ld	(ix - 9), bc
BB26_5:
	add	hl, de
	ld	(ix - 12), hl
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jp	z, BB26_9
	push	de
	push	iy
	ld	hl, (ix + 9)
	push	hl
	ld	hl, _sprite_fname
	push	hl
	ld	(ix - 15), de
	call	_sprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, _.str
	push	hl
	ld	hl, _sprite_fname
	push	hl
	call	_fopen
	push	hl
	pop	de
	pop	hl
	pop	hl
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB26_10
	push	de
	ld	hl, (ix - 3)
	push	hl
	ld	hl, 4
	push	hl
	ld	hl, (ix - 6)
	push	hl
	ld	(ix - 21), de
	call	_fread
	ld	(ix - 18), hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 21)
	push	hl
	call	_fclose
	pop	hl
	ld	hl, (ix - 18)
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	jr	nz, BB26_10
	ld	hl, (ix - 12)
	push	hl
	call	_vdp_select_bitmap
	pop	hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix + 15)
	push	hl
	ld	hl, (ix + 12)
	push	hl
	call	_vdp_load_bitmap
	pop	hl
	pop	hl
	pop	hl
	ld	de, (ix - 15)
	inc	de
	ld	bc, (ix - 9)
	ld	iy, (ix + 6)
	ld	hl, (ix + 21)
	jp	BB26_5
BB26_9:
	ld	hl, (ix - 6)
	push	hl
	call	_free
	pop	hl
	ld	hl, (ix - 9)
	jr	BB26_11
BB26_10:
	ld	hl, (ix - 15)
BB26_11:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_create_sprite
_vdp_create_sprite:
	ld	hl, -4
	call	__frameset
	ld	a, (ix + 6)
	ld	hl, _vdu_sprite_select
	ld	de, 4
	ld	(_vdu_sprite_select+3), a
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 3
	push	hl
	ld	hl, _vdu_sprite_clear
	push	hl
	call	_mos_puts
	ld	bc, (ix + 12)
	pop	hl
	pop	hl
	pop	hl
	ld	de, 1
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB27_2
	ld	bc, 0
BB27_2:
	ld	a, (ix + 9)
	ld	de, _vdu_sprite_add_bitmap
BB27_3:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB27_5
	ld	(ix - 1), a
	ld	a, (ix - 1)
	ld	(_vdu_sprite_add_bitmap+3), a
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 4
	push	hl
	push	de
	ld	(ix - 4), bc
	call	_mos_puts
	ld	de, _vdu_sprite_add_bitmap
	ld	a, (ix - 1)
	ld	bc, (ix - 4)
	pop	hl
	pop	hl
	pop	hl
	inc	a
	dec	bc
	jr	BB27_3
BB27_5:
	ld	a, (ix + 6)
	ld	(_vdu_sprite_activate+3), a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_select_sprite
_vdp_select_sprite:
	call	__frameset0
	ld	a, (ix + 6)
	ld	hl, _vdu_sprite_select
	ld	de, 4
	ld	(_vdu_sprite_select+3), a
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_clear_sprite
_vdp_clear_sprite:
	ld	hl, _vdu_sprite_clear
	ld	de, 3
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_add_sprite_bitmap
_vdp_add_sprite_bitmap:
	call	__frameset0
	ld	a, (ix + 6)
	ld	hl, _vdu_sprite_add_bitmap
	ld	de, 4
	ld	(_vdu_sprite_add_bitmap+3), a
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_move_sprite_to
_vdp_move_sprite_to:
	call	__frameset0
	ld	de, (ix + 6)
	ld	bc, (ix + 9)
	ld	hl, _vdu_sprite_moveto+3
	ld	iy, _vdu_sprite_moveto+5
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	(iy), c
	ld	(iy + 1), b
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _vdu_sprite_moveto
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_move_sprite_by
_vdp_move_sprite_by:
	call	__frameset0
	ld	de, (ix + 6)
	ld	bc, (ix + 9)
	ld	hl, _vdu_sprite_moveby+3
	ld	iy, _vdu_sprite_moveby+5
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	(iy), c
	ld	(iy + 1), b
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _vdu_sprite_moveby
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_show_sprite
_vdp_show_sprite:
	ld	hl, _vdu_sprite_show
	ld	de, 3
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_hide_sprite
_vdp_hide_sprite:
	ld	hl, _vdu_sprite_hide
	ld	de, 3
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_next_sprite_frame
_vdp_next_sprite_frame:
	ld	hl, _vdu_sprite_next_frame
	ld	de, 3
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_prev_sprite_frame
_vdp_prev_sprite_frame:
	ld	hl, _vdu_sprite_prev_frame
	ld	de, 3
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_nth_sprite_frame
_vdp_nth_sprite_frame:
	call	__frameset0
	ld	a, (ix + 6)
	ld	hl, _vdu_sprite_nth_frame
	ld	de, 4
	ld	(_vdu_sprite_nth_frame+3), a
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_activate_sprites
_vdp_activate_sprites:
	call	__frameset0
	ld	a, (ix + 6)
	ld	hl, _vdu_sprite_activate
	ld	de, 4
	ld	(_vdu_sprite_activate+3), a
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_refresh_sprites
_vdp_refresh_sprites:
	ld	hl, _vdu_sprite_update
	ld	de, 3
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vdp_reset_sprites
_vdp_reset_sprites:
	ld	hl, _vdu_sprite_reset
	ld	de, 3
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_mos_puts
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	private	_sys_vars
_sys_vars:
	rb	3

	section	.data,"aw",@progbits
	private	_vdu_bell
_vdu_bell:
	db	7

	section	.data,"aw",@progbits
	private	_vdu_cursor_left
_vdu_cursor_left:
	db	8

	section	.data,"aw",@progbits
	private	_vdu_cursor_right
_vdu_cursor_right:
	db	9

	section	.data,"aw",@progbits
	private	_vdu_cursor_down
_vdu_cursor_down:
	db	10

	section	.data,"aw",@progbits
	private	_vdu_cursor_up
_vdu_cursor_up:
	db	11

	section	.data,"aw",@progbits
	private	_vdu_clear_screen
_vdu_clear_screen:
	db	12

	section	.data,"aw",@progbits
	private	_vdu_clear_graphics
_vdu_clear_graphics:
	db	16

	section	.data,"aw",@progbits
	private	_vdu_cursor_home
_vdu_cursor_home:
	db	30

	section	.data,"aw",@progbits
	private	_vdu_cursor_tab
_vdu_cursor_tab:
	db	31
	db	0
	db	0

	section	.data,"aw",@progbits
	private	_vdu_set_text_colour
_vdu_set_text_colour:
	db	17
	db	0

	section	.data,"aw",@progbits
	private	_vdu_mode
_vdu_mode:
	db	22
	db	0

	section	.data,"aw",@progbits
	private	_vdu_graphics_origin
_vdu_graphics_origin:
	db	29
	dw	0
	dw	0

	section	.data,"aw",@progbits
	private	_vdu_get_scr_dims
_vdu_get_scr_dims:
	db	23
	db	0
	db	134

	section	.data,"aw",@progbits
	private	_vdu_set_logical_scr_dims
_vdu_set_logical_scr_dims:
	db	23
	db	0
	db	192
	db	0

	section	.data,"aw",@progbits
	private	_vdu_cursor_enable
_vdu_cursor_enable:
	db	23
	db	1
	db	0

	section	.data,"aw",@progbits
	private	_vdu_move_to
_vdu_move_to:
	db	25
	db	4
	dw	0
	dw	0

	section	.data,"aw",@progbits
	private	_vdu_line_to
_vdu_line_to:
	db	25
	db	5
	dw	0
	dw	0

	section	.data,"aw",@progbits
	private	_vdu_point
_vdu_point:
	db	25
	db	64
	dw	0
	dw	0

	section	.data,"aw",@progbits
	private	_vdu_triangle
_vdu_triangle:
	db	25
	db	80
	dw	0
	dw	0

	section	.data,"aw",@progbits
	private	_vdu_circle_radius
_vdu_circle_radius:
	db	25
	db	144
	dw	0
	dw	0

	section	.data,"aw",@progbits
	private	_vdu_circle
_vdu_circle:
	db	25
	db	148
	dw	0
	dw	0

	section	.data,"aw",@progbits
	private	_vdu_select_bitmap
_vdu_select_bitmap:
	db	23
	db	27
	db	0
	db	0

	section	.data,"aw",@progbits
	private	_vdu_draw_bitmap
_vdu_draw_bitmap:
	db	23
	db	27
	db	3
	dw	0
	dw	0

	section	.data,"aw",@progbits
	private	_vdu_load_bitmap
_vdu_load_bitmap:
	db	23
	db	27
	db	1
	dw	0
	dw	0

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	"rb", 0

	section	.bss,"aw",@nobits
	private	_sprite_fname
_sprite_fname:
	rb	32

	section	.data,"aw",@progbits
	private	_vdu_sprite_select
_vdu_sprite_select:
	db	23
	db	27
	db	4
	db	0

	section	.data,"aw",@progbits
	private	_vdu_sprite_clear
_vdu_sprite_clear:
	db	23
	db	27
	db	5

	section	.data,"aw",@progbits
	private	_vdu_sprite_add_bitmap
_vdu_sprite_add_bitmap:
	db	23
	db	27
	db	6
	db	0

	section	.data,"aw",@progbits
	private	_vdu_sprite_activate
_vdu_sprite_activate:
	db	23
	db	27
	db	7
	db	0

	section	.data,"aw",@progbits
	private	_vdu_sprite_moveto
_vdu_sprite_moveto:
	db	23
	db	27
	db	13
	dw	0
	dw	0

	section	.data,"aw",@progbits
	private	_vdu_sprite_moveby
_vdu_sprite_moveby:
	db	23
	db	27
	db	14
	dw	0
	dw	0

	section	.data,"aw",@progbits
	private	_vdu_sprite_show
_vdu_sprite_show:
	db	23
	db	27
	db	11

	section	.data,"aw",@progbits
	private	_vdu_sprite_hide
_vdu_sprite_hide:
	db	23
	db	27
	db	12

	section	.data,"aw",@progbits
	private	_vdu_sprite_next_frame
_vdu_sprite_next_frame:
	db	23
	db	27
	db	8

	section	.data,"aw",@progbits
	private	_vdu_sprite_prev_frame
_vdu_sprite_prev_frame:
	db	23
	db	27
	db	9

	section	.data,"aw",@progbits
	private	_vdu_sprite_nth_frame
_vdu_sprite_nth_frame:
	db	23
	db	27
	db	10
	db	0

	section	.data,"aw",@progbits
	private	_vdu_sprite_update
_vdu_sprite_update:
	db	23
	db	27
	db	15

	section	.data,"aw",@progbits
	private	_vdu_sprite_reset
_vdu_sprite_reset:
	db	23
	db	27
	db	16

	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 6c61664110f888c0285ae4c48b150c9a7a4361bb)"
	extern	__frameset
	extern	_malloc
	extern	_fopen
	extern	_sprintf
	extern	_mos_sysvars
	extern	__Unwind_SjLj_Register
	extern	__ishl
	extern	__setflag
	extern	_mos_puts
	extern	__Unwind_SjLj_Unregister
	extern	__imulu
	extern	_fread
	extern	_free
	extern	__frameset0
	extern	_fclose
